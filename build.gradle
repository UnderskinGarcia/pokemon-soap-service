plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.bjornvester.xjc' version '1.8.2'
    id 'org.sonarqube' version "7.0.0.6105"
}

group = 'com.bankaya'
version = '0.0.1-SNAPSHOT'
description = 'SOAP Web Service to consume PokeAPI - Challenge Bankaya'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    // Excluir dependencias conflictivas
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.ws:spring-ws-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'


    // Cucumber
    testImplementation 'io.cucumber:cucumber-java:7.18.1'
    testImplementation 'io.cucumber:cucumber-spring:7.18.1'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'
    testImplementation 'org.junit.platform:junit-platform-suite'

    // JAXB para SOAP
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.6'
    implementation 'wsdl4j:wsdl4j:1.6.3'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    // Caffeine Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // Springdoc OpenAPI (Swagger)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
}

test {
    useJUnitPlatform()
    jvmArgs(
            "-Xshare:off",  // Disable CDS to avoid warning with javaagent
            "-XX:+EnableDynamicAgentLoading"  // Suppress dynamic agent loading warning
    )
    finalizedBy jacocoTestReport
}

// JaCoCo Configuration
jacoco {
    toolVersion = "0.8.14"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Exclusiones para JaCoCo (mismo patrón que SonarQube)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/PokemonSoapServiceApplication.class',
                    '**/config/**',
                    '**/configuration/**',
                    '**/dtos/**',
                    '**/dto/**',
                    '**/entities/**',
                    '**/entity/**',
                    '**/enums/**',
                    '**/enum/**',
                    '**/*Exception.class',
                    '**/*Builder.class',
                    '**/generated/**',
                    '**/build/**',
                    '**/com/bankaya/pokemon/generated/**'
            ])
        }))
    }
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// JAXB Configuration - Generate classes from XSD
xjc {
    xsdDir = file("${projectDir}/src/main/resources/xsd")
    outputJavaDir = layout.buildDirectory.dir("generated-sources/jaxb")
}

// Sonar Configuration
sonar {
    properties {
        property "sonar.projectName", "Pokemon SOAP Service"
        property "sonar.projectKey", "pokemon-soap-service"
        property "sonar.host.url", "http://localhost:9000"

        def sonarToken = System.getenv("SONAR_TOKEN")

        if (sonarToken) {
            property "sonar.token", sonarToken
            println "✅ SonarQube token configurado"
        } else {
            println "No se encontró SONAR_TOKEN. El análisis puede fallar."
        }

        // Rutas del código fuente
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        //property "sonar.java.test.binaries", "build/classes/java/test"

        // Reportes de cobertura
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"

        // Exclusiones
        property "sonar.coverage.exclusions", [
                "**/PokemonSoapServiceApplication.java",
                "**/config/**",
                "**/configuration/**",
                "**/dtos/**",
                "**/dto/**",
                "**/entities/**",
                "**/entity/**",
                "**/enums/**",
                "**/enum/**",
                "**/*Exception.java",
                "**/*Builder.java",
                "**/generated/**",
                "**/build/**"
        ].join(",")
    }
}

